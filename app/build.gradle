apply plugin: 'com.android.application'
apply plugin: 'com.android.databinding'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 23
    buildToolsVersion "22.0.1"

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }
    defaultConfig {
        applicationId "com.lowwor.realtimebus"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode gitCommitCount()
        versionName "1.02." + gitSha()
        manifestPlaceholders = [CHANNEL_NAME: "Unspecified"]
    }
    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        // 输出apk名称为RealTimeBus_v1.0_2015-01-15_wandoujia.apk
                        def fileName = "RealTimeBus_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    productFlavors {
        umeng { manifestPlaceholders = [CHANNEL_NAME: "UMENG"] }
        fir { manifestPlaceholders = [CHANNEL_NAME: "FIR.IM"] }
        wandoujai {manifestPlaceholders = [CHANNEL_NAME: "WanDouJia"]}
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //parcel
    compile 'com.hannesdorfmann.parcelableplease:annotation:1.0.1'
    apt 'com.hannesdorfmann.parcelableplease:processor:1.0.1'
//support
    compile 'com.android.support:design:23.0.1'
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:cardview-v7:23.0.1'
    compile 'com.android.support:recyclerview-v7:23.0.1'


    compile 'io.reactivex:rxjava:1.0.0'
    compile 'io.reactivex:rxandroid:1.0.1'

    apt 'com.google.dagger:dagger-compiler:2.0'
    compile 'com.google.dagger:dagger:2.0'
    compile 'org.glassfish:javax.annotation:10.0-b28'

    compile 'com.jakewharton:butterknife:7.0.0'
    compile 'com.google.code.gson:gson:2.3'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'com.orhanobut:logger:1.11'

    compile 'com.umeng.analytics:analytics:latest.integration'

    // If you need StorIO for SQLite
    compile 'com.pushtorefresh.storio:sqlite:1.4.0'
    // If you need StorIO for ContentResolver
    compile 'com.pushtorefresh.storio:content-resolver:1.4.0'
    compile 'com.pushtorefresh.storio:sqlite-annotations:1.4.0'
    // We recommend to use Android Gradle Apt plugin: https://bitbucket.org/hvisser/android-apt
    apt 'com.pushtorefresh.storio:sqlite-annotations-processor:1.4.0'

    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
    compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'
    compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'

    compile 'com.hannesdorfmann.parcelableplease:annotation:x.x.x'
    apt 'com.hannesdorfmann.parcelableplease:processor:x.x.x'

    compile 'com.facebook.stetho:stetho:1.1.0'


}

//获得git commit的数目
def gitCommitCount() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--count', 'HEAD'
            standardOutput = stdout
        }
        def commitCount = stdout.toString().trim().toInteger()
        return commitCount
    }
    catch (ignored) {
        return 0;
    }
}

def gitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim().substring(0, 4)
}

//使用独立的signing.propreties保存签名信息

def File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    println("keystore file not found: " + props["KEYSTORE_FILE"])
    android.buildTypes.release.signingConfig = null
}


//使用独立的appkey.propreties保存appkey信息
def File appkeyPropFile = file('appkey.properties');
if (appkeyPropFile.exists()) {
    def Properties appkeyProps = new Properties()
    appkeyProps.load(new FileInputStream(appkeyPropFile))
    android.defaultConfig.manifestPlaceholders = [UMENG_APPKEY: appkeyProps['UMENG_APPKEY']]
} else {
    println("appkey file not found: " + props["KEYSTORE_FILE"])
}


def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

